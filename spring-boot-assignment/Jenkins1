pipeline {
    agent any

    tools {
        // This 'maven' corresponds to the name of the Maven installation in Jenkins' Global Tool Configuration.
        maven 'maven-3'
    }

    environment {
        // Use your GHCR repository name
        DOCKER_IMAGE = 'ghcr.io/satyanarayana-senapathi/jenkins-test'
        GHCR_TOKEN = credentials('GHCR-TOKEN')
    }

    stages {
        stage('Do the magic') {
       // Below condition you can change based on your usecase
        when { changeset "./spring-boot-assignment/*"}
        steps {
            sh "uptime"
        }
    }
        stage('Build with Maven') {
            steps {
                script {
                    sh 'mvn clean install -f ./spring-boot-assignment'
                    sh 'sudo docker --version'
                }
            }
        }
        
        stage('Build Docker image') {
            steps {
                script {
                    sh "sudo docker build -t ${DOCKER_IMAGE}:latest -f ./spring-boot-assignment/Dockerfile ./spring-boot-assignment"
                }
            }
        }
        stage('GHCR Login ') {
            steps {
                   sh 'echo $GHCR_TOKEN_PSW | sudo docker login ghcr.io -u $GHCR_TOKEN_USR --password-stdin'
                    sh "sudo docker push ${DOCKER_IMAGE}:latest"
                }
            }
        stage('Integrate Jenkins with EKS Cluster and Deploy App') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: "AWS_CREDENTIALS",
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    // AWS Code
                     sh ('aws eks update-kubeconfig --name jenkins --region us-east-1')
                }
                
        }
        }
    }
}
